{"ast":null,"code":"import { WebPlugin } from '@capacitor/core';\nexport class SecureStoragePluginWeb extends WebPlugin {\n  constructor() {\n    super({\n      name: 'SecureStoragePlugin',\n      platforms: ['web']\n    });\n    this.PREFIX = 'cap_sec_';\n\n    this.addPrefix = key => this.PREFIX + key;\n  }\n\n  get(options) {\n    return localStorage.getItem(this.addPrefix(options.key)) !== null ? Promise.resolve({\n      value: atob(localStorage.getItem(this.addPrefix(options.key)))\n    }) : Promise.reject('Item with given key does not exist');\n  }\n\n  set(options) {\n    localStorage.setItem(this.addPrefix(options.key), btoa(options.value));\n    return Promise.resolve({\n      value: true\n    });\n  }\n\n  remove(options) {\n    localStorage.removeItem(this.addPrefix(options.key));\n    return Promise.resolve({\n      value: true\n    });\n  }\n\n  clear() {\n    for (const key in localStorage) {\n      if (key.indexOf(this.PREFIX) === 0) {\n        localStorage.removeItem(key);\n      }\n    }\n\n    return Promise.resolve({\n      value: true\n    });\n  }\n\n  keys() {\n    const keys = Object.keys(localStorage).filter(k => k.indexOf(this.PREFIX) === 0);\n    return Promise.resolve({\n      value: keys\n    });\n  }\n\n  getPlatform() {\n    return Promise.resolve({\n      value: 'web'\n    });\n  }\n\n}\nconst SecureStoragePlugin = new SecureStoragePluginWeb();\nexport { SecureStoragePlugin }; //# sourceMappingURL=web.js.map","map":null,"metadata":{},"sourceType":"module"}